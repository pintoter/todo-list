// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/pintoter/todo-list/internal/entity"
)

// MockINotesRepository is a mock of INotesRepository interface.
type MockINotesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockINotesRepositoryMockRecorder
}

// MockINotesRepositoryMockRecorder is the mock recorder for MockINotesRepository.
type MockINotesRepositoryMockRecorder struct {
	mock *MockINotesRepository
}

// NewMockINotesRepository creates a new mock instance.
func NewMockINotesRepository(ctrl *gomock.Controller) *MockINotesRepository {
	mock := &MockINotesRepository{ctrl: ctrl}
	mock.recorder = &MockINotesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotesRepository) EXPECT() *MockINotesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockINotesRepository) Create(ctx context.Context, note entity.Note) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, note)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockINotesRepositoryMockRecorder) Create(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockINotesRepository)(nil).Create), ctx, note)
}

// DeleteById mocks base method.
func (m *MockINotesRepository) DeleteById(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockINotesRepositoryMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockINotesRepository)(nil).DeleteById), ctx, id)
}

// DeleteNotes mocks base method.
func (m *MockINotesRepository) DeleteNotes(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotes", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotes indicates an expected call of DeleteNotes.
func (mr *MockINotesRepositoryMockRecorder) DeleteNotes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotes", reflect.TypeOf((*MockINotesRepository)(nil).DeleteNotes), ctx)
}

// GetById mocks base method.
func (m *MockINotesRepository) GetById(ctx context.Context, id int) (entity.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(entity.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockINotesRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockINotesRepository)(nil).GetById), ctx, id)
}

// GetByTitle mocks base method.
func (m *MockINotesRepository) GetByTitle(ctx context.Context, title string) (entity.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitle", ctx, title)
	ret0, _ := ret[0].(entity.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitle indicates an expected call of GetByTitle.
func (mr *MockINotesRepositoryMockRecorder) GetByTitle(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitle", reflect.TypeOf((*MockINotesRepository)(nil).GetByTitle), ctx, title)
}

// GetNotes mocks base method.
func (m *MockINotesRepository) GetNotes(ctx context.Context) ([]entity.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotes", ctx)
	ret0, _ := ret[0].([]entity.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotes indicates an expected call of GetNotes.
func (mr *MockINotesRepositoryMockRecorder) GetNotes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotes", reflect.TypeOf((*MockINotesRepository)(nil).GetNotes), ctx)
}

// GetNotesExtended mocks base method.
func (m *MockINotesRepository) GetNotesExtended(ctx context.Context, limit, offset int, status string, date time.Time) ([]entity.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesExtended", ctx, limit, offset, status, date)
	ret0, _ := ret[0].([]entity.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotesExtended indicates an expected call of GetNotesExtended.
func (mr *MockINotesRepositoryMockRecorder) GetNotesExtended(ctx, limit, offset, status, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesExtended", reflect.TypeOf((*MockINotesRepository)(nil).GetNotesExtended), ctx, limit, offset, status, date)
}

// UpdateNote mocks base method.
func (m *MockINotesRepository) UpdateNote(ctx context.Context, id int, title, description, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, id, title, description, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockINotesRepositoryMockRecorder) UpdateNote(ctx, id, title, description, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockINotesRepository)(nil).UpdateNote), ctx, id, title, description, status)
}

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepository) Create(ctx context.Context, note entity.Note) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, note)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryMockRecorder) Create(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepository)(nil).Create), ctx, note)
}

// DeleteById mocks base method.
func (m *MockIRepository) DeleteById(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIRepositoryMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIRepository)(nil).DeleteById), ctx, id)
}

// DeleteNotes mocks base method.
func (m *MockIRepository) DeleteNotes(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotes", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotes indicates an expected call of DeleteNotes.
func (mr *MockIRepositoryMockRecorder) DeleteNotes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotes", reflect.TypeOf((*MockIRepository)(nil).DeleteNotes), ctx)
}

// GetById mocks base method.
func (m *MockIRepository) GetById(ctx context.Context, id int) (entity.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(entity.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIRepository)(nil).GetById), ctx, id)
}

// GetByTitle mocks base method.
func (m *MockIRepository) GetByTitle(ctx context.Context, title string) (entity.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitle", ctx, title)
	ret0, _ := ret[0].(entity.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitle indicates an expected call of GetByTitle.
func (mr *MockIRepositoryMockRecorder) GetByTitle(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitle", reflect.TypeOf((*MockIRepository)(nil).GetByTitle), ctx, title)
}

// GetNotes mocks base method.
func (m *MockIRepository) GetNotes(ctx context.Context) ([]entity.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotes", ctx)
	ret0, _ := ret[0].([]entity.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotes indicates an expected call of GetNotes.
func (mr *MockIRepositoryMockRecorder) GetNotes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotes", reflect.TypeOf((*MockIRepository)(nil).GetNotes), ctx)
}

// GetNotesExtended mocks base method.
func (m *MockIRepository) GetNotesExtended(ctx context.Context, limit, offset int, status string, date time.Time) ([]entity.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesExtended", ctx, limit, offset, status, date)
	ret0, _ := ret[0].([]entity.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotesExtended indicates an expected call of GetNotesExtended.
func (mr *MockIRepositoryMockRecorder) GetNotesExtended(ctx, limit, offset, status, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesExtended", reflect.TypeOf((*MockIRepository)(nil).GetNotesExtended), ctx, limit, offset, status, date)
}

// UpdateNote mocks base method.
func (m *MockIRepository) UpdateNote(ctx context.Context, id int, title, description, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, id, title, description, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockIRepositoryMockRecorder) UpdateNote(ctx, id, title, description, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockIRepository)(nil).UpdateNote), ctx, id, title, description, status)
}
